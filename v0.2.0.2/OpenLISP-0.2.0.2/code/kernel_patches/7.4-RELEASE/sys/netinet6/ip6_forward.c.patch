*** /sys/netinet6/ip6_forward.c.original	Mon Aug 22 14:29:39 2011
--- /sys/netinet6/ip6_forward.c	Mon Aug 22 14:42:33 2011
***************
*** 36,41 ****
--- 36,42 ----
  #include "opt_inet6.h"
  #include "opt_ipsec.h"
  #include "opt_ipstealth.h"
+ #include "opt_lisp.h"
  
  #include <sys/param.h>
  #include <sys/systm.h>
***************
*** 65,70 ****
--- 66,78 ----
  #include <netinet/icmp6.h>
  #include <netinet6/nd6.h>
  
+ #ifdef LISP 
+ #include <net/lisp/lisp.h> 
+ #include <net/lisp/maptables.h> 
+ 
+ #include <netinet6/lisp6/ip6_lisp6.h>
+ #endif /* LISP */ 
+ 
  #include <netinet/in_pcb.h>
  
  #ifdef IPSEC
***************
*** 106,111 ****
--- 114,124 ----
  #endif
  	char ip6bufs[INET6_ADDRSTRLEN], ip6bufd[INET6_ADDRSTRLEN];
  
+ #ifdef LISP 
+ 	struct eidmap *  local_map = NULL;
+ 	struct eidmap *  remote_map = NULL;
+ #endif /* LISP */ 
+ 	
  	GIANT_REQUIRED; /* XXX bz: ip6_forward_rt */
  
  #ifdef IPSEC
***************
*** 354,359 ****
--- 367,395 ----
  
  	dst = (struct sockaddr_in6 *)&ip6_forward_rt.ro_dst;
  	if (!srcrt) {
+ 
+ #ifdef LISP                                                                   
+ 	/* Check if LISP encap possible.
+ 	 * In possible call the correct routine.
+ 	 */ 
+ 
+ 	if ( ((error = lisp_ip6_mapencap( &m, 0, &local_map,
+ 						 &remote_map)) == 0) 
+ 		&& local_map ) { 
+ 
+ 		error = lisp6_output(m, sizeof(struct ip6_hdr), 
+ 					local_map, remote_map); 
+ 
+ 		goto senderr;
+ 
+ 	} else if (error) { 
+ 
+ 		m_freem(m); 
+ 		goto freecopy; 
+ 
+ 	}; 
+ #endif /* LISP */ 
+ 
  		/* ip6_forward_rt.ro_dst.sin6_addr is equal to ip6->ip6_dst */
  		if (ip6_forward_rt.ro_rt == 0 ||
  		    (ip6_forward_rt.ro_rt->rt_flags & RTF_UP) == 0) {
